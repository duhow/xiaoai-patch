#!/bin/sh

# This script will launch Porcupine (hotword detector) on infinite loop.
# Service can be stopped, same as pressing the MUTE button.

MIC="mico_record"

SENSITIVITY="0.6"
WORD=alexa
TIME=5
NOTIFY_SOUND=/usr/share/sound/wakeup2.mp3
PORCUPINE_FOLDER=/usr/share/porcupine
SPEAK=tts_google
HA_STT_PROVIDER=stt.faster_whisper
STT_LANGUAGE=en
STT_RATE=8000
STT_CHANNEL=1
STT_MAX_TIME=25
STT_REPEAT_MESSAGE=0
RECORDING_RATE=16000
RECORDING_CHANNEL=1
VOLUME_THRESHOLD=10
VOLUME_DURING_STT=10

# import config file if exists
[ -f /data/listener ] && . /data/listener
[ -f /data/tts.conf ] && . /data/tts.conf

log(){
  echo "stt: $@" >> /dev/kmsg
  echo "`date +'%D %T'` $@" >> /tmp/stt.log
}

current_volume(){ amixer get mysoftvol | awk '$0~/%/{print $4}' | tr -d '[]%' | head -n1; }
set_volume(){
  let VOL=$1*255/100
  for SRC in mysoftvol bluetooth 'headphone volume'; do
    amixer set "$SRC" $VOL &>/dev/null &
  done
}

WAV_INPUT=/tmp/input.wav
WAV_STT=/tmp/stt.wav
DATA_STT=/tmp/stt.json

# Set lower rate if cannot convert later
which ffmpeg &>/dev/null || RECORDING_RATE=8000

MODEL=$(uci -c /usr/share/mico get version.version.HARDWARE)

if [ "${MODEL}" = "LX06" ]; then
  amixer sset 'pdm dclk' 'pdm dclk 3.072m, support 8k/16k/32k/48k' &
  amixer sset 'HCIC shift gain from coeff' 'shift with -0x4'
  RECORDING_CHANNEL=8
fi

rm -f $WAV_INPUT $WAV_STT $DATA_STT

while true; do

# program lib model keyword sensitivity ALSA_INPUT
/usr/bin/porcupine /usr/lib/libpv_porcupine.so $PORCUPINE_FOLDER/model.pv $PORCUPINE_FOLDER/keywords/${WORD}_raspberry-pi.ppn $SENSITIVITY $MIC

if [ "$?" -gt 0 ]; then
  sleep 2
  continue
fi

SAVED_VOL=`current_volume`
# lower volume EXCEPT for notifications
if [ "$SAVED_VOL" -gt ${VOLUME_THRESHOLD} ]; then
  set_volume ${VOLUME_DURING_STT}
fi

/bin/show_led 1
#aplay -Dnotify $NOTIFY_SOUND &>/dev/null &
mpg123 -a notify -q $NOTIFY_SOUND &>/dev/null &

# Do all at once:
# Start recording user response - tee to input.wav
# convert to PCM_S16_LE 1ch/8000 - tee to stt.wav
# send data chuncked without waiting

[ -f "${DATA_STT}" ] && rm -f ${DATA_STT}

arecord -N -D$MIC -d $TIME -f S16_LE -c $RECORDING_CHANNEL -r $RECORDING_RATE - | tee ${WAV_INPUT} | \
ffmpeg -hide_banner -loglevel error -i - -f wav -ac ${STT_CHANNEL} -ar ${STT_RATE} -y - | tee ${WAV_STT} | \
curl -H "X-Speech-Content: format=wav; channel=${STT_CHANNEL}; codec=pcm; sample_rate=${STT_RATE}; bit_rate=16; language=${STT_LANGUAGE}" \
     -H "Authorization: Bearer ${HA_TOKEN}" \
     -H "Tranfer-Encoding: chunked" \
     -o ${DATA_STT} -D ${DATA_STT}.hdr \
     --max-time ${STT_MAX_TIME} \
     -XPOST -T - ${HA_URL}/api/stt/${HA_STT_PROVIDER}

# Start loading
/bin/show_led 2

cat ${DATA_STT}.hdr
cat ${DATA_STT}

# Show speaking LED
# /bin/show_led 3

[ "$(jq -r .result ${DATA_STT})" = "success" ] && STT_SUCCESS=1

# call Conversation.Process to execute action
if [ -n "${STT_SUCCESS}" ]; then
  # cleanup text before sending
  STT_TEXT=$(jq -r .text ${DATA_STT} | tr -d '.' | awk '{$1=$1;print}')
  log "$STT_TEXT"
  CONVERSATION_RESPONSE=$(curl \
     -H "Authorization: Bearer ${HA_TOKEN}" \
     -H "Content-Type: application/json" \
     -d "{\"language\": \"${STT_LANGUAGE}\", \"text\": \"${STT_TEXT}\"}" \
     -XPOST ${HA_URL}/api/conversation/process)
  if [ "$STT_REPEAT_MESSAGE" = 1 ]; then
    # repeat what the speaker heard (transcribed)
    ${SPEAK} "${STT_TEXT}"
    sleep 0.5
  fi
  TTS_TEXT=$(echo "${CONVERSATION_RESPONSE}" | jq -r .response.speech.plain.speech)
  ${SPEAK} "${TTS_TEXT}"
else
  log "error"
  ${SPEAK} error
fi

# last animation fadeout and shut LEDs
/bin/show_led 11
for NUM in 1 2 3; do
  /bin/shut_led ${NUM}
done

# restore volume
set_volume $SAVED_VOL

done
# end while
